package parser

import (
	"bufio"
	"fmt"
)

type License struct {
	Name string `json:"name"`
	URL  string `json:"url,omitempty"`
}

type Dependency struct {
	Name    string `json:"name"`
	Version string `json:"version"`
	// BuildMatrix string     `json:"matrix"`
	// CIURL       string     `json:"ci_url"`
	Licenses []*License `json:"licenses,omitempty"`
}

// Parser parses a given input file generated for a build tool so licensed can understand it
type Parser interface {
	// Parse the license file generated by a plugin or by a tool like license_finder
	// and convert that to an []Dependency objects.
	Parse(*bufio.Scanner) ([]*Dependency, error)
}

const SBT = "sbt"

const LICENSE_FINDER = "license_finder"

// Parse the file using a fileFormat type of Parser and return the list of
// dependencies as described in the file
func Parse(file *bufio.Scanner, fileFormat string) ([]*Dependency, error) {
	switch fileFormat {
	case SBT:
		return NewSBTLicenseReportParser().Parse(file)
	case LICENSE_FINDER:
		return NewLicenseFinderParser().Parse(file)
	default:
		return nil, fmt.Errorf("invalid file format, not sure how to parse %s file format", fileFormat)
	}
}
